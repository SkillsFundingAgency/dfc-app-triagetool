// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFC.App.Triagetool.UI.FunctionalTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GetPersonalisedCareersAdviceAndInformationFeature : object, Xunit.IClassFixture<GetPersonalisedCareersAdviceAndInformationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GetPersonalisedCareersAdviceAndInformation.feature"
#line hidden
        
        public GetPersonalisedCareersAdviceAndInformationFeature(GetPersonalisedCareersAdviceAndInformationFeature.FixtureData fixtureData, DFC_App_Triagetool_UI_FunctionalTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "Features", "Get personalised careers advice and information", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        public virtual void VerifyTwoFactorSelection(string levelOne, string levelTwo, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Triagetool",
                    "Smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("levelOne", levelOne);
            argumentsOfScenario.Add("levelTwo", levelTwo);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify two factor selection", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("I am on the home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When(string.Format("I select {0} from the list", levelOne), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then(string.Format("{0} is loaded for the selected {1}", levelTwo, levelOne), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify two factor selection: Variant 0")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify two factor selection: Variant 0")]
        [Xunit.TraitAttribute("Category", "Triagetool")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        public void VerifyTwoFactorSelection_Variant0()
        {
#line 5
this.VerifyTwoFactorSelection("in education", "in university", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify two factor selection: Variant 1")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify two factor selection: Variant 1")]
        [Xunit.TraitAttribute("Category", "Triagetool")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        public void VerifyTwoFactorSelection_Variant1()
        {
#line 5
this.VerifyTwoFactorSelection("in education", "in college or sixth form", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify two factor selection: Variant 2")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify two factor selection: Variant 2")]
        [Xunit.TraitAttribute("Category", "Triagetool")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        public void VerifyTwoFactorSelection_Variant2()
        {
#line 5
this.VerifyTwoFactorSelection("in education", "in secondary school", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify two factor selection: Variant 3")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify two factor selection: Variant 3")]
        [Xunit.TraitAttribute("Category", "Triagetool")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        public void VerifyTwoFactorSelection_Variant3()
        {
#line 5
this.VerifyTwoFactorSelection("employed", "want to change career", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify two factor selection: Variant 4")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify two factor selection: Variant 4")]
        [Xunit.TraitAttribute("Category", "Triagetool")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        public void VerifyTwoFactorSelection_Variant4()
        {
#line 5
this.VerifyTwoFactorSelection("employed", "want to progress in my career", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify two factor selection: Variant 5")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify two factor selection: Variant 5")]
        [Xunit.TraitAttribute("Category", "Triagetool")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        public void VerifyTwoFactorSelection_Variant5()
        {
#line 5
this.VerifyTwoFactorSelection("employed", "at risk of redundancy", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify two factor selection: Variant 6")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify two factor selection: Variant 6")]
        [Xunit.TraitAttribute("Category", "Triagetool")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        public void VerifyTwoFactorSelection_Variant6()
        {
#line 5
this.VerifyTwoFactorSelection("not in work", "want to return to work after a break", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify two factor selection: Variant 7")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify two factor selection: Variant 7")]
        [Xunit.TraitAttribute("Category", "Triagetool")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        public void VerifyTwoFactorSelection_Variant7()
        {
#line 5
this.VerifyTwoFactorSelection("not in work", "want to prepare to get a job", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify two factor selection: Variant 8")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify two factor selection: Variant 8")]
        [Xunit.TraitAttribute("Category", "Triagetool")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        public void VerifyTwoFactorSelection_Variant8()
        {
#line 5
this.VerifyTwoFactorSelection("not in work", "want to change career", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyResultsForTwoFactorSelection(string levelOne, string levelTwo, string results, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("levelOne", levelOne);
            argumentsOfScenario.Add("levelTwo", levelTwo);
            argumentsOfScenario.Add("results", results);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify results for two factor selection", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
 testRunner.Given("I am on the home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
 testRunner.When(string.Format("I choose {0} and {1} from the list", levelOne, levelTwo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.When("I click on see advice button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then(string.Format("the result count should be {0}", results), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for two factor selection: Variant 0")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for two factor selection: Variant 0")]
        public void VerifyResultsForTwoFactorSelection_Variant0()
        {
#line 22
this.VerifyResultsForTwoFactorSelection("in education", "in university", "30", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for two factor selection: Variant 1")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for two factor selection: Variant 1")]
        public void VerifyResultsForTwoFactorSelection_Variant1()
        {
#line 22
this.VerifyResultsForTwoFactorSelection("in education", "in college or sixth form", "28", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for two factor selection: Variant 2")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for two factor selection: Variant 2")]
        public void VerifyResultsForTwoFactorSelection_Variant2()
        {
#line 22
this.VerifyResultsForTwoFactorSelection("in education", "in secondary school", "23", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for two factor selection: Variant 3")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for two factor selection: Variant 3")]
        public void VerifyResultsForTwoFactorSelection_Variant3()
        {
#line 22
this.VerifyResultsForTwoFactorSelection("employed", "want to change career", "25", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for two factor selection: Variant 4")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for two factor selection: Variant 4")]
        public void VerifyResultsForTwoFactorSelection_Variant4()
        {
#line 22
this.VerifyResultsForTwoFactorSelection("employed", "want to progress in my career", "28", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for two factor selection: Variant 5")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for two factor selection: Variant 5")]
        public void VerifyResultsForTwoFactorSelection_Variant5()
        {
#line 22
this.VerifyResultsForTwoFactorSelection("employed", "at risk of redundancy", "30", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for two factor selection: Variant 6")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for two factor selection: Variant 6")]
        public void VerifyResultsForTwoFactorSelection_Variant6()
        {
#line 22
this.VerifyResultsForTwoFactorSelection("not in work", "want to return to work after a break", "29", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for two factor selection: Variant 7")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for two factor selection: Variant 7")]
        public void VerifyResultsForTwoFactorSelection_Variant7()
        {
#line 22
this.VerifyResultsForTwoFactorSelection("not in work", "want to prepare to get a job", "29", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for two factor selection: Variant 8")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for two factor selection: Variant 8")]
        public void VerifyResultsForTwoFactorSelection_Variant8()
        {
#line 22
this.VerifyResultsForTwoFactorSelection("not in work", "want to change career", "29", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyResultsForSelectedFilters(string levelOne, string levelTwo, string results, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("levelOne", levelOne);
            argumentsOfScenario.Add("levelTwo", levelTwo);
            argumentsOfScenario.Add("results", results);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify results for selected filters", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 41
 testRunner.Given("I am on the home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 42
 testRunner.When(string.Format("I choose {0} and {1} from the list", levelOne, levelTwo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.When("I click on see advice button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
 testRunner.And("apply the filters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for selected filters: Variant 0")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for selected filters: Variant 0")]
        public void VerifyResultsForSelectedFilters_Variant0()
        {
#line 40
this.VerifyResultsForSelectedFilters("in education", "in university", "30", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for selected filters: Variant 1")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for selected filters: Variant 1")]
        public void VerifyResultsForSelectedFilters_Variant1()
        {
#line 40
this.VerifyResultsForSelectedFilters("in education", "in college or sixth form", "28", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for selected filters: Variant 2")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for selected filters: Variant 2")]
        public void VerifyResultsForSelectedFilters_Variant2()
        {
#line 40
this.VerifyResultsForSelectedFilters("in education", "in secondary school", "23", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for selected filters: Variant 3")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for selected filters: Variant 3")]
        public void VerifyResultsForSelectedFilters_Variant3()
        {
#line 40
this.VerifyResultsForSelectedFilters("employed", "want to change career", "25", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for selected filters: Variant 4")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for selected filters: Variant 4")]
        public void VerifyResultsForSelectedFilters_Variant4()
        {
#line 40
this.VerifyResultsForSelectedFilters("employed", "want to progress in my career", "28", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for selected filters: Variant 5")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for selected filters: Variant 5")]
        public void VerifyResultsForSelectedFilters_Variant5()
        {
#line 40
this.VerifyResultsForSelectedFilters("employed", "at risk of redundancy", "30", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for selected filters: Variant 6")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for selected filters: Variant 6")]
        public void VerifyResultsForSelectedFilters_Variant6()
        {
#line 40
this.VerifyResultsForSelectedFilters("not in work", "want to return to work after a break", "29", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for selected filters: Variant 7")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for selected filters: Variant 7")]
        public void VerifyResultsForSelectedFilters_Variant7()
        {
#line 40
this.VerifyResultsForSelectedFilters("not in work", "want to prepare to get a job", "29", ((string[])(null)));
#line hidden
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify results for selected filters: Variant 8")]
        [Xunit.TraitAttribute("FeatureTitle", "Get personalised careers advice and information")]
        [Xunit.TraitAttribute("Description", "Verify results for selected filters: Variant 8")]
        public void VerifyResultsForSelectedFilters_Variant8()
        {
#line 40
this.VerifyResultsForSelectedFilters("not in work", "want to change career", "29", ((string[])(null)));
#line hidden
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GetPersonalisedCareersAdviceAndInformationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GetPersonalisedCareersAdviceAndInformationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
